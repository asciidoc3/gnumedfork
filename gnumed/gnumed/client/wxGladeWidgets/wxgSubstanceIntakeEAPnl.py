# -*- coding: UTF-8 -*-
#
# generated by wxGlade
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
from Gnumed.wxpython.gmPhraseWheel import cPhraseWheel
from Gnumed.wxpython.gmDateTimeInput import cDateInputPhraseWheel
from Gnumed.wxpython.gmDateTimeInput import cIntervalPhraseWheel
from Gnumed.wxpython.gmListWidgets import cReportListCtrl
from Gnumed.wxpython.gmMedicationPRWs import cSubstanceSchedulePhraseWheel
from Gnumed.wxpython.gmTextCtrl import cTextCtrl
from Gnumed.wxpython.gmMedicationPRWs import cSubstancePatientNotesPhraseWheel
from Gnumed.wxpython.gmEMRStructWidgets import cEpisodeSelectionPhraseWheel
from Gnumed.wxpython.gmMedicationPRWs import cSubstanceOrDosePhraseWheel
# end wxGlade


class wxgSubstanceIntakeEAPnl(wx.ScrolledWindow):
	def __init__(self, *args, **kwds):
		# begin wxGlade: wxgSubstanceIntakeEAPnl.__init__
		kwds["style"] = kwds.get("style", 0) | wx.BORDER_NONE | wx.TAB_TRAVERSAL
		wx.ScrolledWindow.__init__(self, *args, **kwds)
		self.SetScrollRate(10, 10)

		__szr_main = wx.BoxSizer(wx.VERTICAL)

		self._LBL_information = wx.StaticText(self, wx.ID_ANY, "")
		__szr_main.Add(self._LBL_information, 0, wx.BOTTOM | wx.EXPAND, 2)

		__sline_top = wx.StaticLine(self, wx.ID_ANY)
		__szr_main.Add(__sline_top, 0, wx.BOTTOM | wx.EXPAND, 3)

		__gszr_main = wx.FlexGridSizer(13, 2, 1, 3)
		__szr_main.Add(__gszr_main, 0, wx.EXPAND, 0)

		_LBL_substance = wx.StaticText(self, wx.ID_ANY, _("Substance"))
		_LBL_substance.SetForegroundColour(wx.Colour(255, 0, 0))
		__gszr_main.Add(_LBL_substance, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_substance = cSubstanceOrDosePhraseWheel(self, wx.ID_ANY, "")
		__gszr_main.Add(self._PRW_substance, 2, wx.EXPAND, 0)

		__gszr_main.Add((20, 20), 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		self._LBL_substance_details = wx.StaticText(self, wx.ID_ANY, "")
		__gszr_main.Add(self._LBL_substance_details, 1, wx.EXPAND, 0)

		__gszr_main.Add((20, 20), 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__szr_mgmt_buttons = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_mgmt_buttons, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_research = wx.StaticText(self, wx.ID_ANY, _("Research:"))
		__szr_mgmt_buttons.Add(__lbl_research, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)

		self._BTN_heart = wx.Button(self, wx.ID_ANY, _(u"â™¥"), style=wx.BU_EXACTFIT)
		self._BTN_heart.SetToolTip(_("Show cardiac information relevant to substance selection."))
		__szr_mgmt_buttons.Add(self._BTN_heart, 0, wx.EXPAND | wx.RIGHT, 3)

		self._BTN_kidneys = wx.Button(self, wx.ID_ANY, _("Kidneys"), style=wx.BU_EXACTFIT)
		self._BTN_kidneys.SetToolTip(_("Show renal insufficiency information related to substance selection."))
		__szr_mgmt_buttons.Add(self._BTN_kidneys, 0, wx.EXPAND, 0)

		__szr_mgmt_buttons.Add((20, 20), 1, wx.EXPAND, 0)

		__lbl_manage = wx.StaticText(self, wx.ID_ANY, _("Manage:"))
		__szr_mgmt_buttons.Add(__lbl_manage, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)

		self._BTN_manage_products = wx.Button(self, wx.ID_ANY, _("Drugs"), style=wx.BU_EXACTFIT)
		self._BTN_manage_products.SetToolTip(_("Manage drug products.\n\nNote that this will not select a component for you. What it does is to let you manage (add/edit/delete) the drug products known to GNUmed from which you can select a component."))
		__szr_mgmt_buttons.Add(self._BTN_manage_products, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)

		self._BTN_manage_component = wx.Button(self, wx.ID_ANY, _("Components"), style=wx.BU_EXACTFIT)
		self._BTN_manage_component.SetToolTip(_("Manage drug components."))
		__szr_mgmt_buttons.Add(self._BTN_manage_component, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)

		self._BTN_manage_doses = wx.Button(self, wx.ID_ANY, _("Doses"), style=wx.BU_EXACTFIT)
		self._BTN_manage_doses.SetToolTip(_("Manage substance doses."))
		__szr_mgmt_buttons.Add(self._BTN_manage_doses, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)

		self._BTN_manage_substance = wx.Button(self, wx.ID_ANY, _("Substances"), style=wx.BU_EXACTFIT)
		self._BTN_manage_substance.SetToolTip(_("Manage substances."))
		__szr_mgmt_buttons.Add(self._BTN_manage_substance, 0, wx.ALIGN_CENTER_VERTICAL, 3)

		__lbl_episode = wx.StaticText(self, wx.ID_ANY, _("Episode"))
		__lbl_episode.SetForegroundColour(wx.Colour(255, 0, 0))
		__gszr_main.Add(__lbl_episode, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_episode = cEpisodeSelectionPhraseWheel(self, wx.ID_ANY, "")
		self._PRW_episode.SetToolTip(_("Select, or enter for creation, the episode to which this substance will relate."))
		__gszr_main.Add(self._PRW_episode, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_patient_notes = wx.StaticText(self, wx.ID_ANY, _("Patient notes"))
		__gszr_main.Add(__lbl_patient_notes, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_patient_notes = cSubstancePatientNotesPhraseWheel(self, wx.ID_ANY, "")
		self._PRW_patient_notes.SetToolTip(_("Notes for the patient, say precautions, intake instructions, or aim of intake."))
		__gszr_main.Add(self._PRW_patient_notes, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_provider_notes = wx.StaticText(self, wx.ID_ANY, _("Provider notes"))
		__gszr_main.Add(__lbl_provider_notes, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_provider_notes = cPhraseWheel(self, wx.ID_ANY, "")
		self._PRW_provider_notes.SetToolTip(_("Any clinical notes, comments, or instructions on this substance intake, relevant for other healthcare providers."))
		__gszr_main.Add(self._PRW_provider_notes, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__gszr_main.Add((20, 20), 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__szr_regimen_label = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_regimen_label, 1, wx.EXPAND, 0)

		__lbl_regimen = wx.StaticText(self, wx.ID_ANY, _("Regimen"), style=wx.ALIGN_CENTER_HORIZONTAL)
		__lbl_regimen.SetForegroundColour(wx.Colour(50, 153, 204))
		__szr_regimen_label.Add(__lbl_regimen, 3, wx.ALIGN_CENTER_VERTICAL, 0)

		self._BTN_edit_regimen = wx.Button(self, wx.ID_ANY, _("Edit"), style=wx.BU_EXACTFIT)
		self._BTN_edit_regimen.Enable(False)
		__szr_regimen_label.Add(self._BTN_edit_regimen, 0, wx.EXPAND | wx.RIGHT, 3)

		self._BTN_delete_regimen = wx.Button(self, wx.ID_ANY, _("Delete"), style=wx.BU_EXACTFIT)
		self._BTN_delete_regimen.Enable(False)
		__szr_regimen_label.Add(self._BTN_delete_regimen, 0, wx.EXPAND, 0)

		__szr_regimen_label.Add((20, 20), 1, wx.EXPAND, 0)

		self._BTN_add_regimen = wx.Button(self, wx.ID_ANY, _("Add new"), style=wx.BU_EXACTFIT)
		self._BTN_add_regimen.Enable(False)
		__szr_regimen_label.Add(self._BTN_add_regimen, 0, wx.EXPAND, 3)

		__lbl_amount = wx.StaticText(self, wx.ID_ANY, _("Amount"))
		__gszr_main.Add(__lbl_amount, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		__szr_dose = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_dose, 1, wx.EXPAND, 0)

		self._TCTRL_amount = cTextCtrl(self, wx.ID_ANY, "")
		self._TCTRL_amount.SetToolTip(_("Enter the amount of substance to be taken each time."))
		self._TCTRL_amount.Enable(False)
		__szr_dose.Add(self._TCTRL_amount, 1, wx.ALIGN_CENTER_VERTICAL, 3)

		_lbl_units = wx.StaticText(self, wx.ID_ANY, _("Units:"))
		__szr_dose.Add(_lbl_units, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		self._TCTRL_unit = cTextCtrl(self, wx.ID_ANY, "")
		self._TCTRL_unit.SetToolTip(_("Enter the unit for the amount."))
		self._TCTRL_unit.Enable(False)
		__szr_dose.Add(self._TCTRL_unit, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		__lbl_schedule = wx.StaticText(self, wx.ID_ANY, _("Schedule"))
		__lbl_schedule.SetForegroundColour(wx.Colour(255, 127, 0))
		__gszr_main.Add(__lbl_schedule, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_schedule = cSubstanceSchedulePhraseWheel(self, wx.ID_ANY, "")
		self._PRW_schedule.SetToolTip(_("The schedule for taking this substance."))
		self._PRW_schedule.Enable(False)
		__gszr_main.Add(self._PRW_schedule, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_started = wx.StaticText(self, wx.ID_ANY, _("Started"))
		__gszr_main.Add(__lbl_started, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		__szr_started = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_started, 1, wx.EXPAND, 0)

		self._CHBOX_start_unknown = wx.CheckBox(self, wx.ID_ANY, _("&Unknown - or Date:"), style=wx.CHK_2STATE)
		self._CHBOX_start_unknown.SetToolTip(_("Check here if the start date simply isn't known."))
		self._CHBOX_start_unknown.Enable(False)
		self._CHBOX_start_unknown.SetValue(1)
		__szr_started.Add(self._CHBOX_start_unknown, 0, wx.EXPAND | wx.RIGHT, 3)

		self._DP_started = cDateInputPhraseWheel(self, wx.ID_ANY, "")
		self._DP_started.SetToolTip(_("When was this substance started to be consumed or - if not known - the earliest it is known to have been be consumed."))
		self._DP_started.Enable(False)
		__szr_started.Add(self._DP_started, 1, wx.EXPAND | wx.RIGHT, 5)

		__LBL_start_certainty = wx.StaticText(self, wx.ID_ANY, _("Certainty:"))
		__szr_started.Add(__LBL_start_certainty, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)

		self._PRW_start_certainty = cPhraseWheel(self, wx.ID_ANY, "")
		self._PRW_start_certainty.SetToolTip(_("A comment on the certainty of the start date, such as \"+/- 3 weeks\", \"spring of 2002\", \"shortly after Easter 1996\", ...."))
		self._PRW_start_certainty.Enable(False)
		__szr_started.Add(self._PRW_start_certainty, 1, wx.EXPAND, 5)

		__lbl_duration = wx.StaticText(self, wx.ID_ANY, _("Duration"))
		__gszr_main.Add(__lbl_duration, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_duration = cIntervalPhraseWheel(self, wx.ID_ANY, "")
		self._PRW_duration.SetToolTip(_("How long is this substance supposed to be taken."))
		self._PRW_duration.Enable(False)
		__gszr_main.Add(self._PRW_duration, 1, wx.EXPAND, 10)

		__lbl_discontinued = wx.StaticText(self, wx.ID_ANY, _("Discontinued"))
		__gszr_main.Add(__lbl_discontinued, 0, wx.ALIGN_CENTER_VERTICAL, 5)

		__szr_discontinued_date = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_discontinued_date, 1, wx.EXPAND, 0)

		self._DP_discontinued = cDateInputPhraseWheel(self, wx.ID_ANY, "")
		self._DP_discontinued.SetToolTip(_("When was intake of this substance discontinued ?"))
		self._DP_discontinued.Enable(False)
		__szr_discontinued_date.Add(self._DP_discontinued, 4, wx.EXPAND | wx.RIGHT, 3)

		self._BTN_discontinued_as_planned = wx.Button(self, wx.ID_ANY, _("Per plan"), style=wx.BU_EXACTFIT)
		self._BTN_discontinued_as_planned.SetToolTip(_("Discontinued as planned (start + duration)."))
		self._BTN_discontinued_as_planned.Enable(False)
		__szr_discontinued_date.Add(self._BTN_discontinued_as_planned, 1, wx.ALIGN_CENTER_VERTICAL, 3)

		__szr_discontinued_date.Add((20, 20), 1, wx.EXPAND, 0)

		__LBL_reason = wx.StaticText(self, wx.ID_ANY, _("... Reason"), style=wx.ALIGN_RIGHT)
		__gszr_main.Add(__LBL_reason, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 5)

		self._PRW_discontinue_reason = cPhraseWheel(self, wx.ID_ANY, "")
		self._PRW_discontinue_reason.SetToolTip(_("Reason for discontinuation."))
		self._PRW_discontinue_reason.Enable(False)
		__gszr_main.Add(self._PRW_discontinue_reason, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 5)

		__sline_regimen__regimen_list = wx.StaticLine(self, wx.ID_ANY)
		__szr_main.Add(__sline_regimen__regimen_list, 0, wx.EXPAND, 0)

		self._LCTRL_regimen = cReportListCtrl(self, wx.ID_ANY, style=wx.BORDER_NONE | wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
		__szr_main.Add(self._LCTRL_regimen, 0, wx.EXPAND, 0)

		__gszr_main.AddGrowableCol(1)

		self.SetSizer(__szr_main)
		__szr_main.Fit(self)

		self.Layout()

		self.Bind(wx.EVT_BUTTON, self._on_heart_button_pressed, self._BTN_heart)
		self.Bind(wx.EVT_BUTTON, self._on_kidneys_button_pressed, self._BTN_kidneys)
		self.Bind(wx.EVT_BUTTON, self._on_manage_drug_products_button_pressed, self._BTN_manage_products)
		self.Bind(wx.EVT_BUTTON, self._on_manage_components_button_pressed, self._BTN_manage_component)
		self.Bind(wx.EVT_BUTTON, self._on_manage_doses_button_pressed, self._BTN_manage_doses)
		self.Bind(wx.EVT_BUTTON, self._on_manage_substances_button_pressed, self._BTN_manage_substance)
		self.Bind(wx.EVT_BUTTON, self._on_edit_regimen_button_pressed, self._BTN_edit_regimen)
		self.Bind(wx.EVT_BUTTON, self._on_delete_regimen_button_pressed, self._BTN_delete_regimen)
		self.Bind(wx.EVT_BUTTON, self._on_new_regimen_button_pressed, self._BTN_add_regimen)
		self.Bind(wx.EVT_CHECKBOX, self._on_start_unknown_checked, self._CHBOX_start_unknown)
		self.Bind(wx.EVT_BUTTON, self._on_discontinued_as_planned_button_pressed, self._BTN_discontinued_as_planned)
		# end wxGlade

	def _on_heart_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_heart_button_pressed' not implemented!")
		event.Skip()

	def _on_kidneys_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_kidneys_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_drug_products_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_drug_products_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_components_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_components_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_doses_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_doses_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_substances_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_substances_button_pressed' not implemented!")
		event.Skip()

	def _on_edit_regimen_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_edit_regimen_button_pressed' not implemented!")
		event.Skip()

	def _on_delete_regimen_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_delete_regimen_button_pressed' not implemented!")
		event.Skip()

	def _on_new_regimen_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_new_regimen_button_pressed' not implemented!")
		event.Skip()

	def _on_start_unknown_checked(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_start_unknown_checked' not implemented!")
		event.Skip()

	def _on_discontinued_as_planned_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_discontinued_as_planned_button_pressed' not implemented!")
		event.Skip()

# end of class wxgSubstanceIntakeEAPnl
