# -*- coding: UTF-8 -*-
#
# generated by wxGlade
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
from Gnumed.wxpython.gmPhraseWheel import cPhraseWheel
from Gnumed.wxpython.gmDateTimeInput import cDateInputPhraseWheel
from Gnumed.wxpython.gmDateTimeInput import cIntervalPhraseWheel
from Gnumed.wxpython.gmListWidgets import cReportListCtrl
from Gnumed.wxpython.gmEMRStructWidgets import cEpisodeSelectionPhraseWheel
from Gnumed.wxpython.gmDateTimeInput import cDateInputPhraseWheel
#from Gnumed.wxpython.gmTextCtrl import cTextCtrl
from Gnumed.wxpython.gmMeasurementWidgets import cUnitPhraseWheel
from Gnumed.wxpython.gmTextCtrl import cTextCtrl
from Gnumed.wxpython.gmMedicationPRWs import cSubstanceOrDosePhraseWheel
# end wxGlade


class wxgSubstanceIntakeEAPnl(wx.ScrolledWindow):
	def __init__(self, *args, **kwds):
		# begin wxGlade: wxgSubstanceIntakeEAPnl.__init__
		kwds["style"] = kwds.get("style", 0) | wx.BORDER_NONE | wx.TAB_TRAVERSAL
		wx.ScrolledWindow.__init__(self, *args, **kwds)
		self.SetScrollRate(10, 10)

		__szr_main = wx.BoxSizer(wx.VERTICAL)

		self._LBL_information = wx.StaticText(self, wx.ID_ANY, "")
		__szr_main.Add(self._LBL_information, 0, wx.BOTTOM | wx.EXPAND, 2)

		__sline_top = wx.StaticLine(self, wx.ID_ANY)
		__szr_main.Add(__sline_top, 0, wx.BOTTOM | wx.EXPAND, 3)

		__gszr_main = wx.FlexGridSizer(11, 2, 2, 3)
		__szr_main.Add(__gszr_main, 0, wx.EXPAND, 0)

		_LBL_substance = wx.StaticText(self, wx.ID_ANY, _("Substance"))
		_LBL_substance.SetForegroundColour(wx.Colour(255, 0, 0))
		__gszr_main.Add(_LBL_substance, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_substance = cSubstanceOrDosePhraseWheel(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		__gszr_main.Add(self._PRW_substance, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_dosage = wx.StaticText(self, wx.ID_ANY, _("Amount"))
		__lbl_dosage.SetForegroundColour(wx.Colour(255, 127, 0))
		__gszr_main.Add(__lbl_dosage, 0, wx.ALIGN_CENTER_VERTICAL, 3)

		__szr_dosage = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_dosage, 1, wx.EXPAND, 0)

		self._TCTRL_amount = cTextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		self._TCTRL_amount.SetToolTip(_("Amount of active ingredient."))
		__szr_dosage.Add(self._TCTRL_amount, 1, wx.EXPAND, 3)

		__lbl_unit = wx.StaticText(self, wx.ID_ANY, _("Unit"))
		__lbl_unit.SetForegroundColour(wx.Colour(255, 127, 0))
		__szr_dosage.Add(__lbl_unit, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		self._PRW_unit = cUnitPhraseWheel(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		self._PRW_unit.SetToolTip(_("Units for the amount of active ingredient."))
		__szr_dosage.Add(self._PRW_unit, 1, wx.EXPAND | wx.LEFT, 3)

		__lbl_schedule = wx.StaticText(self, wx.ID_ANY, _("Schedule"))
		__lbl_schedule.SetForegroundColour(wx.Colour(255, 127, 0))
		__gszr_main.Add(__lbl_schedule, 0, 0, 3)

		self._TCTRL_schedule = cTextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_WORDWRAP)
		self._TCTRL_schedule.SetToolTip(_("The intake schedule describing how to use the dosage."))
		__gszr_main.Add(self._TCTRL_schedule, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_started = wx.StaticText(self, wx.ID_ANY, _("Started"))
		__lbl_started.SetForegroundColour(wx.Colour(255, 127, 0))
		__gszr_main.Add(__lbl_started, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		__szr_started = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_started, 1, wx.EXPAND, 0)

		self._BTN_started_today = wx.Button(self, wx.ID_ANY, _(u"&Today ‚Üí"), style=wx.BU_EXACTFIT)
		__szr_started.Add(self._BTN_started_today, 0, wx.ALIGN_CENTER_VERTICAL, 3)

		self._DPRW_started = cDateInputPhraseWheel(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		self._DPRW_started.SetToolTip(_("The start of substance intake."))
		__szr_started.Add(self._DPRW_started, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		self._CHBOX_start_unknown = wx.CheckBox(self, wx.ID_ANY, _("&Unknown"), style=wx.CHK_2STATE)
		__szr_started.Add(self._CHBOX_start_unknown, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		__vline_unknown_comment = wx.StaticLine(self, wx.ID_ANY, style=wx.LI_VERTICAL)
		__szr_started.Add(__vline_unknown_comment, 0, wx.EXPAND | wx.LEFT, 5)

		__lbl_comment_on_start = wx.StaticText(self, wx.ID_ANY, _("Comment"))
		__szr_started.Add(__lbl_comment_on_start, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)

		self._TCTRL_comment_on_start = cTextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		self._TCTRL_comment_on_start.SetToolTip(_("Notes on start date."))
		__szr_started.Add(self._TCTRL_comment_on_start, 3, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		__lbl_discontinued = wx.StaticText(self, wx.ID_ANY, _("Stopped"))
		__gszr_main.Add(__lbl_discontinued, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		__szr_discontinued = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_discontinued, 1, wx.EXPAND, 0)

		self._BTN_discontinued_today = wx.Button(self, wx.ID_ANY, _(u"To&day ‚Üí"), style=wx.BU_EXACTFIT)
		__szr_discontinued.Add(self._BTN_discontinued_today, 0, wx.ALIGN_CENTER_VERTICAL, 3)

		self._DPRW_discontinued = cDateInputPhraseWheel(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		self._DPRW_discontinued.SetToolTip(_("The end of substance intake."))
		__szr_discontinued.Add(self._DPRW_discontinued, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		__lbl_comment_on_stop = wx.StaticText(self, wx.ID_ANY, _("Reason"))
		__szr_discontinued.Add(__lbl_comment_on_stop, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)

		self._TCTRL_discontinue_reason = cTextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		self._TCTRL_discontinue_reason.SetToolTip(_("Reason for discontinuation."))
		__szr_discontinued.Add(self._TCTRL_discontinue_reason, 3, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		__lbl_episode = wx.StaticText(self, wx.ID_ANY, _("Episode"))
		__lbl_episode.SetForegroundColour(wx.Colour(255, 127, 0))
		__gszr_main.Add(__lbl_episode, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self._PRW_episode = cEpisodeSelectionPhraseWheel(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
		self._PRW_episode.SetToolTip(_("Select, or enter for creation, the episode to which this substance will relate."))
		__gszr_main.Add(self._PRW_episode, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_notes_spacer = wx.StaticText(self, wx.ID_ANY, "")
		__gszr_main.Add(__lbl_notes_spacer, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(sizer_1, 1, wx.EXPAND, 0)

		sizer_1.Add((20, 20), 1, 0, 0)

		__lbl_notes = wx.StaticText(self, wx.ID_ANY, _("Notes for:"))
		sizer_1.Add(__lbl_notes, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		sizer_1.Add((20, 20), 2, 0, 0)

		__lbl_patient_notes = wx.StaticText(self, wx.ID_ANY, _("Patient"))
		__gszr_main.Add(__lbl_patient_notes, 0, 0, 0)

		self._TCTRL_patient_notes = cTextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_WORDWRAP)
		self._TCTRL_patient_notes.SetToolTip(_("Notes intended for the patient, such as:\n\n- aim of intake\n- intake instructions\n- conditions to observe/report"))
		__gszr_main.Add(self._TCTRL_patient_notes, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_provider_notes = wx.StaticText(self, wx.ID_ANY, _("Providers"))
		__gszr_main.Add(__lbl_provider_notes, 0, 0, 0)

		self._TCTRL_provider_notes = cTextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_WORDWRAP)
		self._TCTRL_provider_notes.SetToolTip(_("Notes intended for other providers relevant to this intake, such as:\n\n- unusual dosage/indication\n- contraindications/interactions assessment\n- monitoring considerations"))
		__gszr_main.Add(self._TCTRL_provider_notes, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_our_notes = wx.StaticText(self, wx.ID_ANY, _("Ourselves"))
		__gszr_main.Add(__lbl_our_notes, 0, 0, 0)

		self._TCTRL_our_notes = cTextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_WORDWRAP)
		self._TCTRL_our_notes.SetToolTip(_("Notes for ourselves such as patient-particular observations, notabenes, etc.\n\nNot intended for outside documents."))
		__gszr_main.Add(self._TCTRL_our_notes, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		__lbl_research = wx.StaticText(self, wx.ID_ANY, _("Research"))
		__gszr_main.Add(__lbl_research, 0, wx.ALIGN_CENTER_VERTICAL, 3)

		__szr_mgmt_buttons = wx.BoxSizer(wx.HORIZONTAL)
		__gszr_main.Add(__szr_mgmt_buttons, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

		self._BTN_heart = wx.Button(self, wx.ID_ANY, _(u"ü´Ä"), style=wx.BORDER_NONE | wx.BU_EXACTFIT)
		self._BTN_heart.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		self._BTN_heart.SetToolTip(_("Cardiac information relevant to this substance."))
		__szr_mgmt_buttons.Add(self._BTN_heart, 0, wx.EXPAND, 3)

		self._BTN_kidneys = wx.Button(self, wx.ID_ANY, _(u"ü´ò"), style=wx.BORDER_NONE | wx.BU_EXACTFIT)
		self._BTN_kidneys.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		self._BTN_kidneys.SetToolTip(_("Renal insufficiency information related to this substance."))
		__szr_mgmt_buttons.Add(self._BTN_kidneys, 0, wx.EXPAND | wx.LEFT, 3)

		self._BTN_lungs = wx.Button(self, wx.ID_ANY, _(u"ü´Å"), style=wx.BORDER_NONE | wx.BU_EXACTFIT)
		self._BTN_lungs.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		self._BTN_lungs.SetToolTip(_("Pulmonary toxicity information."))
		__szr_mgmt_buttons.Add(self._BTN_lungs, 0, wx.EXPAND | wx.LEFT, 3)

		self._BTN_pregnancy = wx.Button(self, wx.ID_ANY, _(u"ü§∞"), style=wx.BORDER_NONE | wx.BU_EXACTFIT)
		self._BTN_pregnancy.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		self._BTN_pregnancy.SetToolTip(_("Embryo toxicity information."))
		__szr_mgmt_buttons.Add(self._BTN_pregnancy, 0, wx.EXPAND | wx.LEFT, 3)

		__szr_mgmt_buttons.Add((20, 20), 3, wx.EXPAND, 0)

		self._BTN_manage_substance = wx.Button(self, wx.ID_ANY, _("Substances"))
		self._BTN_manage_substance.SetToolTip(_("Manage substances."))
		__szr_mgmt_buttons.Add(self._BTN_manage_substance, 0, wx.ALIGN_CENTER_VERTICAL, 3)

		self._BTN_manage_doses = wx.Button(self, wx.ID_ANY, _("Doses"))
		self._BTN_manage_doses.SetToolTip(_("Manage substance doses."))
		__szr_mgmt_buttons.Add(self._BTN_manage_doses, 0, wx.EXPAND | wx.LEFT, 3)

		self._BTN_manage_component = wx.Button(self, wx.ID_ANY, _("Components"))
		self._BTN_manage_component.SetToolTip(_("Manage drug components."))
		self._BTN_manage_component.Enable(False)
		__szr_mgmt_buttons.Add(self._BTN_manage_component, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 3)

		self._BTN_manage_products = wx.Button(self, wx.ID_ANY, _("Drugs"))
		self._BTN_manage_products.SetToolTip(_("Manage drug products.\n\nNote that this will not select a component for you. What it does is to let you manage (add/edit/delete) the drug products known to GNUmed from which you can select a component."))
		self._BTN_manage_products.Enable(False)
		__szr_mgmt_buttons.Add(self._BTN_manage_products, 0, wx.EXPAND | wx.LEFT, 3)

		__sline_regimen__regimen_list = wx.StaticLine(self, wx.ID_ANY)
		__szr_main.Add(__sline_regimen__regimen_list, 0, wx.EXPAND, 0)

		self._LCTRL_regimen = cReportListCtrl(self, wx.ID_ANY, style=wx.BORDER_NONE | wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
		self._LCTRL_regimen.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BACKGROUND))
		self._LCTRL_regimen.Enable(False)
		__szr_main.Add(self._LCTRL_regimen, 0, wx.EXPAND, 0)

		__gszr_main.AddGrowableRow(2)
		__gszr_main.AddGrowableRow(7)
		__gszr_main.AddGrowableRow(8)
		__gszr_main.AddGrowableRow(9)
		__gszr_main.AddGrowableCol(1)

		self.SetSizer(__szr_main)
		__szr_main.Fit(self)

		self.Layout()

		self._BTN_started_today.Bind(wx.EVT_BUTTON, self._on_started_today_button_pressed)
		self._CHBOX_start_unknown.Bind(wx.EVT_CHECKBOX, self._on_start_unknown_checkbox_toggled)
		self._BTN_discontinued_today.Bind(wx.EVT_BUTTON, self._on_discontinued_today_button_pressed)
		self._BTN_heart.Bind(wx.EVT_BUTTON, self._on_heart_button_pressed)
		self._BTN_kidneys.Bind(wx.EVT_BUTTON, self._on_kidneys_button_pressed)
		self._BTN_lungs.Bind(wx.EVT_BUTTON, self._on_lungs_button_pressed)
		self._BTN_pregnancy.Bind(wx.EVT_BUTTON, self._on_pregnancy_button_pressed)
		self._BTN_manage_substance.Bind(wx.EVT_BUTTON, self._on_manage_substances_button_pressed)
		self._BTN_manage_doses.Bind(wx.EVT_BUTTON, self._on_manage_doses_button_pressed)
		self._BTN_manage_component.Bind(wx.EVT_BUTTON, self._on_manage_components_button_pressed)
		self._BTN_manage_products.Bind(wx.EVT_BUTTON, self._on_manage_drug_products_button_pressed)
		# end wxGlade

	def _on_started_today_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_started_today_button_pressed' not implemented!")
		event.Skip()

	def _on_start_unknown_checkbox_toggled(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_start_unknown_checkbox_toggled' not implemented!")
		event.Skip()

	def _on_discontinued_today_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_discontinued_today_button_pressed' not implemented!")
		event.Skip()

	def _on_heart_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_heart_button_pressed' not implemented!")
		event.Skip()

	def _on_kidneys_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_kidneys_button_pressed' not implemented!")
		event.Skip()

	def _on_lungs_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_lungs_button_pressed' not implemented!")
		event.Skip()

	def _on_pregnancy_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_pregnancy_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_substances_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_substances_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_doses_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_doses_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_components_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_components_button_pressed' not implemented!")
		event.Skip()

	def _on_manage_drug_products_button_pressed(self, event):  # wxGlade: wxgSubstanceIntakeEAPnl.<event_handler>
		print("Event handler '_on_manage_drug_products_button_pressed' not implemented!")
		event.Skip()

# end of class wxgSubstanceIntakeEAPnl
